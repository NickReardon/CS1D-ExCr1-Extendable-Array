<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_extendable_array" kind="class" language="C++" prot="public">
    <compoundname>ExtendableArray</compoundname>
    <includes refid="_extendable_array_8h" local="no">ExtendableArray.h</includes>
    <templateparamlist>
      <param>
        <type>class Type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_extendable_array_1a4c66b2c30279973abd90e2c06016c59c" prot="private" static="no" mutable="no">
        <type>Type *</type>
        <definition>Type* ExtendableArray&lt; Type &gt;::typeAr</definition>
        <argsstring></argsstring>
        <name>typeAr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="28" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_extendable_array_1a4aeb6c16105662c2f85bfa5082dfd48b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ExtendableArray&lt; Type &gt;::capacity</definition>
        <argsstring></argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Template datatype pointer for array allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="30" column="5" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_extendable_array_1a6817ce9066c319e08362f56f2d5351f6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ExtendableArray&lt; Type &gt;::currentSize</definition>
        <argsstring></argsstring>
        <name>currentSize</name>
        <briefdescription>
<para>The current reserved memory locations of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="31" column="5" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_extendable_array_1a3d91922a5639d1d406ffdf9b3641fe6d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ExtendableArray&lt; Type &gt;::frontIndex</definition>
        <argsstring></argsstring>
        <name>frontIndex</name>
        <briefdescription>
<para>count of used indeces in the array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="33" column="5" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_extendable_array_1a505ae26294778d5b0848450a91d79785" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ExtendableArray&lt; Type &gt;::endIndex</definition>
        <argsstring></argsstring>
        <name>endIndex</name>
        <briefdescription>
<para>tracks the first index of the circular array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="34" column="5" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_extendable_array_1a6cfccf1bfc24b3a448d0893c6751e0c3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::shiftRight</definition>
        <argsstring>(const int givenIndex)</argsstring>
        <name>shiftRight</name>
        <param>
          <type>const int</type>
          <declname>givenIndex</declname>
        </param>
        <briefdescription>
<para>tracks the last index of the circular array </para>
        </briefdescription>
        <detaileddescription>
<para>Shift array members right/up, wrapping around to the end</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>givenIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>int value passed from outside of the object index is adjusted for use in the method. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="50" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="50" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1af8ad78eead133d52363e464a9232ac58" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::shiftLeft</definition>
        <argsstring>(const int givenIndex)</argsstring>
        <name>shiftLeft</name>
        <param>
          <type>const int</type>
          <declname>givenIndex</declname>
        </param>
        <briefdescription>
<para>Shift array members left/down, wrapping around to the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>givenIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>int value passed from outside of the object index is adjusted for use in the method. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="101" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="101" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a9832b9126121a36be4dcaddec9f597c3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::expand</definition>
        <argsstring>(const int minIncrease=1)</argsstring>
        <name>expand</name>
        <param>
          <type>const int</type>
          <declname>minIncrease</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Expands the array to accomodate a given minimum increase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minIncrease</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The minimum increase. Supports larger increases (e.g. adding multiple instances at once ) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="148" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="148" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1afede9341c3d88aa3bf7f679337ba4665" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ExtendableArray&lt; Type &gt;::adjustedIndex</definition>
        <argsstring>(const int givenIndex) const</argsstring>
        <name>adjustedIndex</name>
        <param>
          <type>const int</type>
          <declname>givenIndex</declname>
        </param>
        <briefdescription>
<para>Given a normal index ( 0 .. capacity ) return the adjusted index to accomodate the circular array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty <ref refid="class_except" kindref="compound">Except</ref> Exception index is out of range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>givenIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the given. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int the adjusted index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="198" column="5" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="198" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1acc2f40b7a0f0d71b28ecdc127ed9a226" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Deletes the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="238" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="238" bodyend="241"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_extendable_array_1adc71c6a57932fa86be831b9ecd42f4f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ExtendableArray&lt; Type &gt;::ExtendableArray&lt; Type &gt;</definition>
        <argsstring>(const int newCapacity=8)</argsstring>
        <name>ExtendableArray</name>
        <param>
          <type>const int</type>
          <declname>newCapacity</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        @par    Creates empty array of either a specified capacity or uses the default value if
        not provided
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Template datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newCapacity</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The new capacity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="238" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="259" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1ab834d209e5ece1688a37f171c2e7fef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ExtendableArray&lt; Type &gt;::ExtendableArray&lt; Type &gt;</definition>
        <argsstring>(const ExtendableArray&lt; Type &gt; &amp;otherExArray)</argsstring>
        <name>ExtendableArray</name>
        <param>
          <type>const <ref refid="class_extendable_array" kindref="compound">ExtendableArray</ref>&lt; Type &gt; &amp;</type>
          <declname>otherExArray</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        @par    Copies the values of the contents of another ExtendableArray into this one
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Template datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherExArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The other array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="238" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="277" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1af30c1e7c5825e1a3bd3e22841d0576e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ExtendableArray&lt; Type &gt;::ExtendableArray&lt; Type &gt;</definition>
        <argsstring>(const Type *ptrArray, const int arSize)</argsstring>
        <name>ExtendableArray</name>
        <param>
          <type>const Type *</type>
          <declname>ptrArray</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>arSize</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        @par Copies the values of the contents of a given array into this one
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Template datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrArray</parametername>
</parameternamelist>
<parameterdescription>
<para>array to copy values from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the given array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="238" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="313" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a2ce77043b9bed73f390847c86d826d3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ExtendableArray&lt; Type &gt;::~ExtendableArray</definition>
        <argsstring>()</argsstring>
        <name>~ExtendableArray</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="343" column="1" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1ad78fe9087efabefa817d5f103da33bf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::clearAll</definition>
        <argsstring>(const int newCapacity=capacity)</argsstring>
        <name>clearAll</name>
        <param>
          <type>const int</type>
          <declname>newCapacity</declname>
          <defval><ref refid="class_extendable_array_1a4aeb6c16105662c2f85bfa5082dfd48b" kindref="member">capacity</ref></defval>
        </param>
        <briefdescription>
<para>Deletes current array and allocates a new one with a given capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newCapacity</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The capacity for the new array Can be left out to use current capacity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="359" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="359" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a1bed66b41d67c88f36378ba4c3ac1ce0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ExtendableArray&lt; Type &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>evaluates if the array is empty or not </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True / False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="376" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a6ba293f42f7a185a9f0c6862b7122e59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ExtendableArray&lt; Type &gt;::full</definition>
        <argsstring>() const</argsstring>
        <name>full</name>
        <briefdescription>
<para>evaluates if the array is full or not </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True / False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="387" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="387" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1abf490fdc09ef547fdd23881b0df38def" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ExtendableArray&lt; Type &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Gets the size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An int. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="399" column="5" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a2ad9b13d44a77ec554d3942247545497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::insertAt</definition>
        <argsstring>(const int givenIndex, const Type &amp;newItem)</argsstring>
        <name>insertAt</name>
        <param>
          <type>const int</type>
          <declname>givenIndex</declname>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>newItem</declname>
        </param>
        <briefdescription>
<para>Inserts the value at the given index ( after adjustment ) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>givenIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newItem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="413" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="413" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1af56d3d48621d8e59f6a135d28d6801c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>template&lt; class Type &gt; void ExtendableArray&lt; Type &gt;::insertFront</definition>
        <argsstring>(const Type &amp;newItem)</argsstring>
        <name>insertFront</name>
        <param>
          <type>const Type &amp;</type>
          <declname>newItem</declname>
        </param>
        <briefdescription>
<para>Inserts the paramater value at the front of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>template datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newItem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="455" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="455" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a8b5ae2d65fdcdbd5f9096a1124f7b1f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>template&lt; class Type &gt; void ExtendableArray&lt; Type &gt;::insertBack</definition>
        <argsstring>(const Type &amp;newItem)</argsstring>
        <name>insertBack</name>
        <param>
          <type>const Type &amp;</type>
          <declname>newItem</declname>
        </param>
        <briefdescription>
<para>Inserts the paramater value at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>template datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newItem</parametername>
</parameternamelist>
<parameterdescription>
<para>The new item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="490" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="490" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a68aa2fe55eb2c257821cf3f0cf693d99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::eraseFront</definition>
        <argsstring>()</argsstring>
        <name>eraseFront</name>
        <briefdescription>
<para>Erase the value at the front of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        @par    Moves the frontIndex value to the right, excluding the value from the valid
        range in the array
</verbatim></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown when an except error condition occurs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="527" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="527" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1acc592524a2aab644b87022231401e7ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::eraseBack</definition>
        <argsstring>()</argsstring>
        <name>eraseBack</name>
        <briefdescription>
<para>Erase the value at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        @par    Moves the endIndex value to the right, excluding the value from the valid range
        in the array
</verbatim></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown when an except error condition occurs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="566" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="566" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a644089eac144696f7fa2d602056c140e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type ExtendableArray&lt; Type &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>Gets the value at the front of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;Type&gt; the front index value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="600" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="600" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1ac85a73af195a8d0655a3b747a41dd597" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type ExtendableArray&lt; Type &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>Gets the value at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;Type&gt; the end index value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="620" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="620" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1aaca481cc5e183973bf436ba6ee9ccb0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; ExtendableArray&lt; Type &gt;::at</definition>
        <argsstring>(const int index) const</argsstring>
        <name>at</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Accesses the value at the given index ( after adjustment ) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;Type&gt; the index value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="639" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a30adffe932c4e44aa845de81e4ec668c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; ExtendableArray&lt; Type &gt;::operator[]</definition>
        <argsstring>(const int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Array indexer operator ( adjusted inside ) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;Type&gt; the index value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="651" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="651" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a6a4958da3a63aef59824a43f568b2962" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::printAll</definition>
        <argsstring>(std::ostream &amp;output) const</argsstring>
        <name>printAll</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print all values in the valid array range line by line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">output</parametername>
</parameternamelist>
<parameterdescription>
<para>ostream object ( cout, file, etc. ) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="664" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="664" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_extendable_array_1a2ce4ac180096dc12153c4f832d8a1d9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendableArray&lt; Type &gt;::PrintWithLabel</definition>
        <argsstring>(const std::string &amp;label, std::ostream &amp;output) const</argsstring>
        <name>PrintWithLabel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Allows a string to be passed to output before calling the printAll method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_except" kindref="compound">Except</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Exception thrown when class is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>The label. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">output</parametername>
</parameternamelist>
<parameterdescription>
<para>ostream object ( cout, file, etc. ) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="698" column="6" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="698" bodyend="711"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extendable circular array template class. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Nick Reardon </para>
</simplesect>
<simplesect kind="date"><para>11/25/2020</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>template datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>ExtendableArray&lt; Type &gt;</label>
        <link refid="class_extendable_array"/>
      </node>
    </collaborationgraph>
    <location file="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" line="26" column="1" bodyfile="repos/CS1D ExCr1 Extendable Array/CS1D ExCr1 Extendable Array/ExtendableArray.h" bodystart="25" bodyend="715"/>
    <listofallmembers>
      <member refid="class_extendable_array_1afede9341c3d88aa3bf7f679337ba4665" prot="protected" virt="non-virtual"><scope>ExtendableArray</scope><name>adjustedIndex</name></member>
      <member refid="class_extendable_array_1aaca481cc5e183973bf436ba6ee9ccb0d" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>at</name></member>
      <member refid="class_extendable_array_1ac85a73af195a8d0655a3b747a41dd597" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>back</name></member>
      <member refid="class_extendable_array_1a4aeb6c16105662c2f85bfa5082dfd48b" prot="private" virt="non-virtual"><scope>ExtendableArray</scope><name>capacity</name></member>
      <member refid="class_extendable_array_1ad78fe9087efabefa817d5f103da33bf6" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>clearAll</name></member>
      <member refid="class_extendable_array_1a6817ce9066c319e08362f56f2d5351f6" prot="private" virt="non-virtual"><scope>ExtendableArray</scope><name>currentSize</name></member>
      <member refid="class_extendable_array_1acc2f40b7a0f0d71b28ecdc127ed9a226" prot="protected" virt="non-virtual"><scope>ExtendableArray</scope><name>destroy</name></member>
      <member refid="class_extendable_array_1a1bed66b41d67c88f36378ba4c3ac1ce0" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>empty</name></member>
      <member refid="class_extendable_array_1a505ae26294778d5b0848450a91d79785" prot="private" virt="non-virtual"><scope>ExtendableArray</scope><name>endIndex</name></member>
      <member refid="class_extendable_array_1acc592524a2aab644b87022231401e7ca" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>eraseBack</name></member>
      <member refid="class_extendable_array_1a68aa2fe55eb2c257821cf3f0cf693d99" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>eraseFront</name></member>
      <member refid="class_extendable_array_1a9832b9126121a36be4dcaddec9f597c3" prot="protected" virt="non-virtual"><scope>ExtendableArray</scope><name>expand</name></member>
      <member refid="class_extendable_array_1adc71c6a57932fa86be831b9ecd42f4f2" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>ExtendableArray</name></member>
      <member refid="class_extendable_array_1ab834d209e5ece1688a37f171c2e7fef4" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>ExtendableArray</name></member>
      <member refid="class_extendable_array_1af30c1e7c5825e1a3bd3e22841d0576e6" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>ExtendableArray</name></member>
      <member refid="class_extendable_array_1a644089eac144696f7fa2d602056c140e" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>front</name></member>
      <member refid="class_extendable_array_1a3d91922a5639d1d406ffdf9b3641fe6d" prot="private" virt="non-virtual"><scope>ExtendableArray</scope><name>frontIndex</name></member>
      <member refid="class_extendable_array_1a6ba293f42f7a185a9f0c6862b7122e59" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>full</name></member>
      <member refid="class_extendable_array_1a2ad9b13d44a77ec554d3942247545497" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>insertAt</name></member>
      <member refid="class_extendable_array_1a8b5ae2d65fdcdbd5f9096a1124f7b1f6" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>insertBack</name></member>
      <member refid="class_extendable_array_1af56d3d48621d8e59f6a135d28d6801c4" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>insertFront</name></member>
      <member refid="class_extendable_array_1a30adffe932c4e44aa845de81e4ec668c" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>operator[]</name></member>
      <member refid="class_extendable_array_1a6a4958da3a63aef59824a43f568b2962" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>printAll</name></member>
      <member refid="class_extendable_array_1a2ce4ac180096dc12153c4f832d8a1d9e" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>PrintWithLabel</name></member>
      <member refid="class_extendable_array_1af8ad78eead133d52363e464a9232ac58" prot="protected" virt="non-virtual"><scope>ExtendableArray</scope><name>shiftLeft</name></member>
      <member refid="class_extendable_array_1a6cfccf1bfc24b3a448d0893c6751e0c3" prot="protected" virt="non-virtual"><scope>ExtendableArray</scope><name>shiftRight</name></member>
      <member refid="class_extendable_array_1abf490fdc09ef547fdd23881b0df38def" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>size</name></member>
      <member refid="class_extendable_array_1a4c66b2c30279973abd90e2c06016c59c" prot="private" virt="non-virtual"><scope>ExtendableArray</scope><name>typeAr</name></member>
      <member refid="class_extendable_array_1a2ce77043b9bed73f390847c86d826d3b" prot="public" virt="non-virtual"><scope>ExtendableArray</scope><name>~ExtendableArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
